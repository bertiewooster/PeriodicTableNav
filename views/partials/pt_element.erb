<% # Inputs (optional ones in parentheses) %>
<% # element, (ec_class), (properties[Hash]), (markers), (no_link) %>
<% # properties = Hash["property_1" => (options[Hash]), "property_2" => (options[Hash])] %>
<% # where the properties will be displayed in the order of the hash %>
<% # where property_n =  %>
<% #   atomic_num %>
<% #   symbol %>
<% #   name %>
<% #   name_origin %>
<% #   group %>
<% #   period %>
<% #   atomic_weight %>
<% #   atomic_wt_is_mass_number_of_longest_lived_isotope %>
<% #   specific_heat_capacity_j_per_gk %>
<% #   density_g_per_cm3 %>
<% #   density_is_estimated %>
<% #   melting_point_k %>
<% #   melt_is_estimated %>
<% #   boiling_point_k %>
<% #   boil_is_estimated %>
<% #   electronegativity %>
<% #   abundance_mg_per_kg %>
<% #   abundance_is_upper_limit %>
<% #   e_config %>
<% # where options for all properties = %>
<% #   label %>
<% #     = true: show label, e.g. "Name origin" %>
<% #     = false (default): do not %>
<% # where options for e_config = %>
<% #   include_base %>
<% #     = true (default): includes base (filled shell), e.g. [He] %>
<% #     = false: does not %>
<% #   space_terms %>
<% #     = true (default): puts spaces between terms, e.g. [He] 2s2 2p1 %>
<% #     = false: does not, e.g. [He]2s22p1 %>
<% #   spans %>
<% #     = true (default): include spans (with classes) used for jQuery selection of (sub-)terms to highlight differences between adjacent elements, %>
<% #         e.g. <2s><2sn>2</2sn><2sl>s</2sl><2sc>1</2sc></2s> (where <name> is short for <span class="name">) %>
<% #     = false: do not include any spans %>
<% # where options for symbol = %>
<% #   markers %>
<% #     = true: includes five-pointed stars to point to lanthanides and actindes on Ba and Ra respectively %>
<% #     = false (default): does not %>

<% # If no ec_class (wide or narrow) was passed in, use narrow %>
<% begin %>
	<% ec_class # if ec_class was passed in, use it; if not, go to rescue %>
<% rescue %>
	<% ec_class = "narrow" %>
<% end %>

<% # If no properties hash was passed in, use default hash %>
<% begin %>
	<% properties # if properties was passed in, use it; if not, go to rescue %>
<% rescue %>
	<% properties = 
		{"atomic_num"=>nil,
		"symbol"=>nil,
		"name"=>nil,
		"e_config" => {"base" => true, "space_terms" => true, "term_spans" => true}} %>
<% end %>

<% # Show 5-pointed star(s) on Ba (*) and Ra (**) if markers is true; used for home page (to point to lanthanides & actinides, respectively) %>
<% # If markers is false or unspecified, don't show markers %>
<% begin %>
	<% show_markers = true if markers # if markers was passed in and is true, show markers; otherwise, %>
<% rescue %>
	<% show_markers = false # don't show markers %>
<% end %>

<% # If no spans (true or false) was passed in, use true %>
<% begin %>
	<% properties["term_spans"] # if spans was passed in, use it; if not, go to rescue %>
<% rescue %>
	<% properties["e_config"]["term_spans"] = true %>
<% end %>

<% # Create a link to element's page unless no_link is true; if no_link isn't included in locals passed to this .erb, create a link %>
<% begin %>
	<% create_link = false if no_link %>
<% rescue %>
	<% create_link = true %>
<% end %>

<% if create_link %>
	<a href="/element/<%=element.atomic_num %>" title="element <%=element.atomic_num%>">
<% end %>

<% # Loop to output properties (atomic_num, symbol, etc.) in order given in hash %>
<% properties.each do |property, options| %>
	<% options = Hash.new() if options == nil # create (empty) options hash if doesn't exist %>
	<% options["label"] = false if !options.has_key?("label") %>
	<% case property; 
	   when "atomic_num" %>
 		<div class='pt_atomic_num'>
 		<%= 'Atomic number: ' if options["label"] == true %>
 		<%= element.atomic_num %></div>
	<% when 'symbol' %>
		<div class='pt_symbol'>
 		<%= 'Symbol: ' if options["label"] == true %>
			<%= element.symbol 
			%><% if show_markers 
				%><% if element.atomic_num == 56 
					%><sup class="pointer">&#9733;</sup>
				<% end 
				%><% if element.atomic_num == 88 
					%><sup class="pointer">&#9733;&#9733;</sup>
				<% end %>
			<% end %>
		</div>
	<% when 'name' %>
		<div class='pt_name'>
			<%= 'Name: ' if options["label"] == true %>
			<%= element.name %>
		</div>
	<% when 'name_origin' %>
		<div class='pt_name_origin'>
			<%= 'Name origin: ' if options["label"] == true %>
			<%= element.name_origin %>
		</div>
	<% when 'group' %>
		<div class='pt_group'>
			<%= 'Group: ' if options["label"] == true %>
			<%= element.group %>
		</div>
	<% when 'period' %>
		<div class='pt_period'>
			<%= 'Period: ' if options["label"] == true %>
			<%= element.period %>
		</div>
	<% when 'atomic_weight' %>
		<div class='pt_atomic_weight'>
			<%= 'Atomic weight (amu): ' if options["label"] == true %>
			<% if element.atomic_wt_is_mass_number_of_longest_lived_isotope == 1 %>
				[<%= element.atomic_weight.round %>]
			<% else %>
				<%= element.atomic_weight %>
			<% end %>
		</div>
	<% when 'atomic_wt_is_mass_number_of_longest_lived_isotope' %>
		<div class='pt_atomic_wt_is_mass_number_of_longest_lived_isotope'>
			<%= 'Atomic weight is mass number of longest lived isotope: ' if options["label"] == true %>
			<%= element.atomic_wt_is_mass_number_of_longest_lived_isotope %>
		</div>
	<% when 'specific_heat_capacity_j_per_gk' %>
		<div class='pt_specific_heat_capacity_j_per_gk'>
			<%= 'Specific heat capacity (J/gK): ' if options["label"] == true %>
			<%= element.specific_heat_capacity_j_per_gk %>
		</div>
	<% when 'density_g_per_cm3' %>
		<div class='pt_density_g_per_cm3'>
			<%= 'Density (g/cm<sup>3</sup>): ' if options["label"] == true %>
			<% if @origin.density_is_estimated == 1 %>
				(<%= @origin.density_g_per_cm3.round %>)
			<% else %>
				<%= @origin.density_g_per_cm3 %>
			<% end %>
		</div>
	<% when 'density_is_estimated' %>
		<div class='pt_density_is_estimated'>
			<%= 'Density is estimated: ' if options["label"] == true %>
			<%= element.density_is_estimated %>
		</div>
	<% when 'melting_point_k' %>
		<div class='pt_melting_point_k'>
			<%= 'Melting point (K): ' if options["label"] == true %>
			<% if @origin.melt_is_estimated == 1 %>
				(<%= @origin.melting_point_k.round %>)
			<% else %>
				<%= @origin.melting_point_k %>
			<% end %>
		</div>
	<% when 'melt_is_estimated' %>
		<div class='pt_melt_is_estimated'>
			<%= 'Melting point is estimated: ' if options["label"] == true %>
		<%= element.melt_is_estimated %>
		</div>
	<% when 'boiling_point_k' %>
		<div class='pt_boiling_point_k'>
			<%= 'Boiling point (K): ' if options["label"] == true %>
			<% if @origin.boil_is_estimated == 1 %>
				(<%= @origin.boiling_point_k.round %>)
			<% else %>
				<%= @origin.boiling_point_k %>
			<% end %>			
		</div>
	<% when 'boil_is_estimated' %>
		<div class='pt_boil_is_estimated'>
			<%= 'Boiling point is estimated: ' if options["label"] == true %>
			<%= element.boil_is_estimated %>
		</div>
	<% when 'electronegativity' %>
		<div class='pt_electronegativity'>
			<%= 'Electronegativity (Pauling): ' if options["label"] == true %>
			<% if @origin.electronegativity.nil? %>
				unknown
			<% else %>
				<%= @origin.electronegativity %>
			<% end %>									
		</div>
	<% when 'abundance_mg_per_kg' %>
		<div class='pt_abundance_mg_per_kg'>
			<%= 'Abundance (mg/kg): ' if options["label"] == true %>
			<% if @origin.abundance_is_upper_limit == 1 %>
				<
			<% end %>
			<%= @origin.abundance_mg_per_kg %>
		</div>
	<% when 'abundance_is_upper_limit' %>
		<div class='pt_abundance_is_upper_limit'>
			<%= 'Abundance is upper limit: ' if options["label"] == true %>
			<%= element.abundance_is_upper_limit %>
		</div>
	<% when 'e_config' %>
		<% before_e_config = Time.now %>
		<div class="<%=ec_class%>">
			<% @orbs = Orb.all(:element_id => element.atomic_num) # get orbitals for this element %>
			<% spacer = options["space_terms"] == true ? " " : "" %>
			<%= 'Electron configuration: ' if options["label"] == true %>
			<% # Following lines offer possibility to squish together all electron config terms so they won't have spaces between them ([He]2s22p1 rather than [He] 2s2 2p1) %>
			<% if options["base"] == true
				%><% before_base = Time.new %>
				<% @base = Base.get(element.period).base
				%><span class="ec_base"><%= @base %></span
			><% end 
			%><% if properties["e_config"]["term_spans"] %><span class="terms"><% end 
				%><% for eo in 0..@orbs.size-1 
					%><% before_orbital = Time.new 
					%><% @orbital = Orbital.get(@orbs[eo].orbital_id) # for each orbital id (e.g. 11), get its term (e.g. 5p)
					%><% @time_orbitals += Time.new - before_orbital
					%><% before_terms = Time.new %><%=spacer%><%=spacer
					%><% if properties["e_config"]["term_spans"] 
						%><span class="ec_<%=@orbital.n.to_s+@orbital.l%>"
							><span class="ec_<%=@orbital.n.to_s+@orbital.l%>n"><%=@orbital.n %></span
							><span class="ec_<%=@orbital.n.to_s+@orbital.l%>l"><%= @orbital.l %></span
							><span class="ec_<%=@orbital.n.to_s+@orbital.l%>c"><sup class="<%=ec_class%>"><%=@orbs[eo].count%></sup></span
						></span
					><% else 
						%><%=@orbital.n %><%= @orbital.l %><sup class="<%=ec_class%>"><%=@orbs[eo].count%></sup
					><% end 
					%><% @terms += (Time.new-before_terms)
				%><% end %>
			<% if properties["e_config"]["term_spans"] %></span><% end %>
		</div>
		<% @time_in_e_config += Time.now - before_e_config %>
	<% else %>
		<div>Error: unknown property requested</div> 
	<% end %>
<% end %>

<% if create_link %>
	</a>
<% end %>