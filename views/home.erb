<% start_time = Time.new %>
<% properties = 
	{"atomic_num"=>nil,
	"symbol"=>nil,
	"name"=>nil,
	"e_config" => {"base" => false, "space_terms" => true, "term_spans" => true}} %>

<table class="home">
<!-- Main groups -->
<% period_header = 0 # labels for periods %>
	<tr>
		<% rows_total = 2 + @max_period + 2 + 1 %>
			<%# Number of rows for "Period" to span: 12 =
				2 header rows for main + 7 main periods + 1 header row for f + 2 f periods %>
		<th rowspan="<%=rows_total%>" class="period_word rotate">
			Period
		</th>
		<th></th>
		<th>Group</th>
	</tr>
	<tr>
		<th class="period_header period_labels_col"></th>
		<% @main_groups.each do |group_header| %>
			<th class="home_element">
				<% # if group_header == 1 %> Group <% # end %>
				<%= erb :'partials/group_link_generator', :locals=> {:linear_group => group_header} %>
			</th>
		<% end %>  
	</tr>
<% @ebyp.each do |period| %>
	<% period_header += 1 #increment the period number in preparation for next period %>
	<% lastGroup = 0 %>
	<tr>
		<th class="period_header period_labels_col">
			<%= erb :'partials/link_generator', :locals=> {:link => Hash["type" => 'period','number'=>period_header]} %>
		</th>
		<% period.each do |element| %>
			<% next if not @main_groups.include? element.grouplin # skip non-main group (e.g., f-block) elements %>
			<% blanks = element.grouplin - lastGroup - 1 %>
			<% while blanks > 0 %>
				<td></td>
				<% blanks -= 1 %>
			<% end %>
			<td class="inPTable">
				<%= erb :'partials/pt_element', :locals=> {:element => element, :markers => true, :properties => properties, :ec_class => "narrow"} %>
				<% if element.grouplin != @main_pauses_group %>
					<% lastGroup = element.grouplin #record the group number of this element %>
				<% else %>
					<% lastGroup = @f_groups.max #if this is traditional group 2, set lastGroup so won't be blanks between this element and next element (traditional group 3) %>
				<% end %>
			</td>
		<% end %>
 	 </tr>
<% end %> 

<!-- f groups table -->
<% period_header = 0 # labels for periods %>
	<tr class="f_group_labels">
		<th class="f_group_labels spacer"></th>
		<th class="spacer"></th>
		<th class="spacer"></th>
		<% @f_groups.each do |group_header| %>
			<th class="home_element">
				<%= erb :'partials/group_link_generator', :locals=> {:linear_group => group_header} %>
			</th>
		<% end %>
		<th class="spacer"></th>
		<th class="spacer"></th>
	</tr>
	
	<% @ebyp.each do |period| %>
		<% period_header += 1 #increment the period number in preparation for next period %>
		<% lastGroup = 0 %>
		<% if Element.where(:period => period_header, :grouplin => @f_groups.min).size > 0 # if there are f group elements in this period, plot them; if not, skip period %>
			<tr>
				<th class="period_header period_labels_col">
					<%= erb :'partials/link_generator', :locals=> {:link => Hash["type" => 'period','number'=>period_header]} %>			
				</th>
				<td class="spacer"></td>
				<td class="spacer marker">
					<% if period_header == 6 %><%=@star%><% end %>
					<% if period_header == 7 %><%=@star%><%=@star%><% end %>
				</td>
				<% period.each do |element| %>
					<% next if not @f_groups.include? element.grouplin # if element group isn't an f group, skip element %>
					<td class="inPTable">
						<%= erb :'partials/pt_element', :locals=> {:element => element, :ec_class => "narrow", :properties => properties} %>
						<% lastGroup = element.grouplin %>
					</td>
				<% end %>
				<td class="spacer"></td>
				<td class="spacer"></td>
 			</tr>
		<% end %>
	<% end %>
</table>

<div id="log"></div>

<p class="footnote" id="footnote">Note: Only valence electrons are shown on this page to save space.</p>
<p>Tip: Hover over an element to compare its electron configuration to that of the element to its right.</p>


<%#="home.erb time: " + (Time.new-start_time).to_s %>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="../periodictablenav.js"></script>

<script>

const log = (...strs) => 
  document.querySelector("pre").textContent += `\n${strs.join("\n")}`;
const showSortedValues = (arr, key) => 
  ` => ${arr.reduce((acc, val) => ([...acc, val[key]]), [])}`;

	// the actual sort lamda factory function
	const sortOnKey = (key, string, desc) => {
	const caseInsensitive = string && string === "CI";
	return (a, b) => {
		a = caseInsensitive ? a[key].toLowerCase() : a[key];
		b = caseInsensitive ? b[key].toLowerCase() : b[key];
		if (string) {
		return desc ? b.localeCompare(a) : a.localeCompare(b);
		}
		return desc ? b - a : a - b;
	}
	};

	// a few examples
	const onNameStringAscendingCaseSensitive = getTestArray().sort( sortOnKey("name", true) );
	const onNameStringAscendingCaseInsensitive = getTestArray().sort( sortOnKey("name", "CI", true) );
	const onValueNumericDescending = getTestArray().sort( sortOnKey("value", false, true) );

	function getTestArray() {
	return [{
		name: 'Bob',
		artist: 'Rudy',
		value: 23,
	}, {
		name: 'John',
		artist: 'Drusko',
		value: 123,
	}, {
		name: 'Tiff',
		artist: 'Needell',
		value: 1123,
	}, {
		name: 'Top',
		artist: 'Gear',
		value: 11123,
	}, {
		name: 'john',
		artist: 'Johanson',
		value: 12,
	}, ];
	}

	$(document).ready(function() {
		//$('td.inPTable').mousemove(function( event ) { // Use instead of mouseenter for "hover between elements to compare them"
		$('td.inPTable').mouseenter(function() {
			$hovering = $(this);

			/* Work in progress: "hover between elements to compare them"
			// Mouse coordinates
			var X = event.pageX;
			var Y = event.pageY;

			// Element (td) bounds
			var offset = $hovering.offset();
			var l = offset.left;
			var t = offset.top;
			var w = $hovering.width();
			var h = $hovering.height();
			var r = offset.left + w;
			var b = offset.top + h;

			// Distances from mouse to bounds
			var from_l = Math.abs(l-X);
			var from_t = Math.abs(t-Y);
			var from_r = Math.abs(r-X);
			var from_b = Math.abs(b-Y);

			//console.log('*key = name, string ascending case sensitive',showSortedValues(onNameStringAscendingCaseSensitive, "name"));
			console.log(`\n*key = value, numeric desc`,   showSortedValues(onValueNumericDescending, "value"));
			console.log(`\n*key = value, numeric desc`,   showSortedValues(onValueNumericDescending, "name"));

			var msg = "left: " + offset.left + ", top: " + offset.top;
			msg += ", right: " + r  + ", bottom: " + b;
			$( "#log" ).html( "left: " + offset.left + ", top: " + offset.top + ", right: " + r  + ", bottom: " + b);
			// end of "hover between elements to compare them" work in progress */

			$base = $hovering.nextAll('.inPTable').first(); // Select first element cell to the right of hovered-over element; .nextAll.first lets jump d-block (groups 3-12) for group 2

			msg = "Hover: " + $(this).find(".pt_symbol").text() + " at " + event.pageX + ", " + event.pageY + ". Compare: " + $base.find(".pt_symbol").text();
			 //$( "#log" ).prepend( "<div>" + msg + "</div>" );
			if ($base.exists()) { // if there's an element cell to the right, do terms comparison
				hovering_posn = 'left';
				terms_mouseover($hovering,$base,hovering_posn);

				// remove any extraneous borders from table cells above or to right of f-group elements
				$('th.home_element').css({"border":"0px solid black"});
				$('th.spacer').css({"border":"0px solid black"});

				// console.log('There is a base element for comparison');
			}
		});
		$('td.inPTable').mouseleave(function() {
			$hovering = $(this);
			$base = $hovering.nextAll('.inPTable').first(); // Select first element cell to the right of hovered-over element; .nextAll.first lets jump d-block (groups 3-12) for group 2
			var msg = "Left: " + $(this).find(".pt_symbol").text() + ", Compare: " + $base.find(".pt_symbol").text();
			// $( "#log" ).prepend( "<div>" + msg + "</div>" );
			if ($base.exists()) { // if there's an element cell to the right, do terms comparison
				hovering_posn = 'left';
				terms_mouseout($hovering,$base);
				// console.log('There is a base element for comparison');
			}
		});
	}); // end ready
</script>